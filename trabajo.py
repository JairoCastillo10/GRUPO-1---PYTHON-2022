# -*- coding: utf-8 -*-
"""Trabajo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CwKVZUnk6AFROc8U5lkdClBIvIRyWvKM
"""

! pip install numpy
! pip install pandas
! pip install matplotlib

import math as mt
import random as rd
import pandas as pd
import numpy  as np
import matplotlib.pyplot as plt
from matplotlib.pylab import subplots

ruta_prices="/content/hprice (Versión corta).xlsx"
prices_df=pd.read_excel(ruta_prices)

import pandas as pd
def Columns(df):
  columnas = df.columns
  list_columns = list(columnas)
  return list_columns
list_columnas_pricesdf= Columns(prices_df)
#print('hola',list_columnas_pricesdf[1],'bien')
#num_columnas = len(list_columnas_pricesdf)
#print(len(list_columnas_pricesdf))
#input('Ingrese valor de la columna {}: '.format(list_columnas_pricesdf))
#print(range(0,len(list_columnas_pricesdf)))
#dir(np)

df = prices_df
def añadir_fila():
  global df
  dicc_fila = {}
  columnas_df = Columns(df)
  for columna in columnas_df:
    dicc_fila[columna] = float(input('Ingrese valor de la columna {}: '.format(columna)))
  df = df.append(dicc_fila, ignore_index = True)
  df.to_excel('/content/hprice (Versión corta).xlsx', index = False)

def filtrar():
  global df
  dec = input('F si desea filtrar una fila, C si desea filtrar una columna y S si desea ordenar una columna: ')
  if dec == 'F':
    print('El número máximo de filas es: ',len(df['price']))
    nfila_escogida = int(input('¿Cuál es el número de fila que escoge: '))
    fila_escogida = df.iloc[nfila_escogida]
    print(fila_escogida)
  if dec == 'C':
    columna_escogida = input('¿Cuál es el nombre de la columna a escoger? ')
    print(df[columna_escogida])
  if dec == 'S':
      col_eleg=input('Ingrese el nombre de la columna a ordenar: ')
      asc_des=input('Presione A si es de manera ascendente y cualquier tecla para lo contrario: ')
      if asc_des == 'A':
        df_ordenado = df.sort_values(col_eleg,ascending=True)
        print(df_ordenado)
      if asc_des != 'A':
        df_ordenado = df.sort_values(col_eleg,ascending=False)
        print(df_ordenado)

def Estadistico():
  global df
  columna_elegida = input('Ingrese el nombre de la columna que desea aplicar los estadísticos: ')
  estadisticas_columna = df[columna_elegida].describe()
  print(estadisticas_columna)

def Grafico():
    global df
    tipo_graf=input('ingresar 1 si es para una variable o 2 si es gráfico de dispersión para 2 variables:')
    if tipo_graf == '1':
        variable_x = input("Ingrese la variable que desea graficar: ")
        color_barras = input("¿De qué color le gustaría que fuese el histograma? Por favor, escríbalo en inglés: ")
        numero_datos = len(df[variable_x])
        cantidad_bins = round(numero_datos**(1/2))
        variable_x_array = np.array(df[variable_x])
        plt.hist(variable_x_array,bins=cantidad_bins,alpha=0.5,color=color_barras,edgecolor='black')
    if tipo_graf == '2':
        variable_x = input("Ingrese la variable 'x': ")
        variable_x_array = np.array(df[variable_x])
        variable_y = input("Ingrese la variable 'y': ")
        variable_y_array = np.array(df[variable_y])
        plt.scatter(variable_x_array,variable_y_array,color='blue')

def nueva_columna():
  global df
  valores_nuevos = []
  numero_valores = len(df['price'])
  name_nueva_columna = input('Escriba el nombre de la característica que desea añadir: ')
  tipo_columna = input('R si desea columna de número aleatorios, D si desea ingresar los datos de la columna y L si desea convertir una columna en Ln:')
  if tipo_columna == 'R':
   tipo_style=input('E si los aleatorios son enteros o F si los aleatorios son flotantes:')
   if tipo_style == 'E':
    lim_inf= int(input('Ingrese el límite inferior:'))
    lim_sup= int(input('Ingrese el límite superior:'))
    while numero_valores != len(valores_nuevos):
     valores_nuevos.append(rd.randint(lim_inf,lim_sup))
    df[name_nueva_columna] = valores_nuevos
    df.to_excel('/content/hprice (Versión corta).xlsx', index = False)
   if tipo_style == 'F':
    lim_inf= round(float(input('Ingrese el límite inferior:')),2)
    lim_sup= round(float(input('Ingrese el límite superior:')),2)
    while numero_valores != len(valores_nuevos):
     valores_nuevos.append(rd.uniform(lim_inf,lim_sup))
    df[name_nueva_columna] = valores_nuevos
    df.to_excel('/content/hprice (Versión corta).xlsx', index = False)
  if tipo_columna == 'D':
   while numero_valores != len(valores_nuevos):
    valores_nuevos.append(input('Ingrese los datos: '))
   df[name_nueva_columna] = valores_nuevos
   df.to_excel('/content/hprice (Versión corta).xlsx', index = False)
  if tipo_columna == 'L':
   columna_elegida = input('Ingrese el nombre de la columna que desea aplicar logaritmo neperiano: ')
   df[name_nueva_columna] = np.log(df[columna_elegida])
   df.to_excel('/content/hprice (Versión corta).xlsx', index = False)

estado = 0

def decision_usuario():
  decision = input('I para ingresar una observación, F para filtrar datos, G solicitar gráficos, E para solicitar estadísticos, C para nuevas características, otra tecla para salir: ')
  if decision == 'I':
    estado = 0
  elif decision == 'F':
    estado = 1
  elif decision == 'G':
    estado = 2
  elif decision == 'E':
    estado = 3
  elif decision == 'C':
    estado = 4
  else:
    estado = 5
  return estado

estado = decision_usuario()
while True:
  if estado ==0:
    añadir_fila()
    estado = decision_usuario()  
  if estado ==1:
    filtrar()
    estado = decision_usuario()
  if estado == 2:
    Grafico()
    estado = decision_usuario()
  if estado == 3:
    Estadistico()
    estado = decision_usuario()
  if estado == 4:
    nueva_columna()
    estado = decision_usuario()
  if estado == 5:
    print('Cerrando el programa')
    break